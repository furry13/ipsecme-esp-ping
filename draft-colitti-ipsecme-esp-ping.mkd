---
title: ESP Echo Protocol
abbrev: ESP-PING
docname: draft-colitti-ipsecme-esp-ping-02

# stand_alone: true

ipr: trust200902
area: Internet
wg: IPSECME Working Group
kw: Internet-Draft
cat: std
updates: 4303

coding: utf-8
pi:    # can use array (if all yes) or hash here
  toc: yes
  sortrefs:   # defaults to yes
  symrefs: yes

author:

- ins: L. Colitti
  name: Lorenzo Colitti
  org: Google
  email: lorenzo@google.com

- ins: J. Linkova
  name: Jen Linkova
  org: Google
  email: furry@google.com
  email: furry13@gmail.com

- ins: M. Richardson
  name: Michael Richardson
  org: Sandelman Software Works
  email: mcr+ietf@sandelman.ca

normative:

informative:

--- abstract

This document defines an ESP echo function which can be used to detect whether a given network path supports ESP packets.

--- middle

# Problem Statement

IPsec sessions between nodes that have global connectivity will by default use ESP packets in IPv4 or IPv6 headers without encapsulation. These packets may have advantages over ESP-in-UDP encapsulation, such as:

* They require fewer keepalive packets to keep sessions open.

** On some networks, ESP is be statelessly allowed in both directions, and thus not require any keepalive packets at all. For example, the IPv6 Simple Security recommendations {{!RFC6092}} specify that ESP by default must always be allowed and not be subject to any timeouts.

** Even if ESP is not statelessly allowed, experience from real world networks is that timeouts for ESP are higher than for UDP sessions, thus requiring IPsec endpoints to send fewer keepalives.

* They provide slightly lower overhead, due to the absence of the UDP header.

However, because ESP packets do not share fate with IKE packets, it is possible for the network to allow IKE packets but not ESP packets.
This leads to the IPsec session not being able to exchange any packets even though IKE negotiation succeeded.

Because ESP is only used after IKE negotiation, this failure mode is difficult to predict, difficult to detect, and difficult to recover from. In particular, migrating a session using MOBIKE {{?RFC4555}} to a network that does not allow ESP could result in the session blackholing all future packets until the problem is detected and a new migration is performed to enable encapsulation.

Operational experience suggests that networks and some home routers that drop ESP packets are common enough to be a problem for general purpose VPN applications desiring to work reliably on the Internet.

# Terminology

{::boilerplate bcp14}

# Protocol Specification

An IPv6 node that desires to determine whether the path to a particular destination can support ESP packets can send an ESP Echo Request packet to that destination. ESP Echo Request packets are ESP packets with an SPI value of (7-TBD) and a Next Header value of 59 (No Next Header).

If the destination supports ESP, and wishes to reveal to the sender that it does so, it SHOULD reply with an ESP Echo Reply packet. ESP Echo Reply packets are ESP packets with an SPI value of (8-TBD) and a Next Header value of 59.

The ESP Echo Request and Reply packets utilize the standard ESP packet format as described in Section 2 of {{!RFC4303}} with the following changes:

* SPI set to
  * [ESP-ECHO-REQUEST] for ESP Echo Request
  * [ESP-ECHO-REPLY] for ESP Echo Reply
* The Next Header field of the ESP header SHOULD be set to 59 (No Next Header).
* No Integrity Check Value-ICV.

The payload has the following format:

     0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |        ECHO Identifier        |      ECHO Sequence Number     |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |     Data ...                                                  |
     +-+-+-+-+-


    * ECHO Identifier: An identifier to aid in matching Echo Replies to Echo Requests. MAY be zero.
      Implementations that support multiple simultaneous Echo Request sessions MUST ensure that
      different sessions have different identifiers. Implementations that are not aware of other
      implementations that might be running on the same node at the same time SHOULD randomize the
      identifier to prevent collisions, and MUST be prepared to receive responses to packets that
      were sent by another implementation.

    * ECHO Sequence Number: An identifier to aid in matching Echo Replies to Echo Requests. MAY be zero.

    * Data: Zero or more octets of arbitrary data.


Figure 1: ESP Echo Request and Reply Payload Overview

An IPsec peer, prior to an IKE negotiation or after completing an IPsec negotiation, intending to ascertain the path's capability to support ESP packets to a specific destination, MAY send one or more ESP Echo Request packet(s) to the destination.
Should the destination support ESP and intend to communicate this capability to the potential IPsec peer, it SHOULD respond with an ESP Echo Reply packet.

The sender MAY send ESP Echo packets with zero data. 
When responding to an ESP Echo packet, the node MUST copy the data from the ESP Echo packet to the ESP Echo Reply packet, up to the limit of the MTU of the path back to the sender.

# Use cases

A node that wishes to set up an IPsec session to a peer that is known to support this protocol can discover whether the intermediate network will carry ESP packets by sending an ESP Echo Request to the peer. Depending on wether it receives an ESP Echo Reply or not, it could choose to enable encapsulatior, use a different IP protocol, or use a different server or interface.

Network operators can troubleshoot IPsec sessions by sending ESP Echo Request packets from one peer to another to determine if the network between the peers will successfully carry ESP, and if so, what maximum packet size the network is able to support.

ESP Echo Requests can be used as keepalives, to maintain firewall state entries if the network statefully filters ESP between endpoints.

# Discovering ESP Echo Support

If no response is received to an ESP Echo Request packet, it can be caused by one of the following:

* the peer doesn't support ESP Echo protocol.
* there is no end-to-end ESP connectivity.
* intermediate nodes allow regular ESP packets, but drop ESP packets that have SPIs in the reserved SPI range.

Without some prior knowledge about ESP Echo support by the remote side, the sender can not distibguish those two scenarios.
Therefore the sender SHOULD NOT treat lack of response as an indicator of end-to-end connectivity issues until an explicit confirmation of ESP Echo support by the peer is received. Because ESP might still work even if intermediate nodes drop ESP Echo Request or ESP Echo Reply packets, senders SHOULD still attempt to use ESP if no alternative paths or protocols (e.g., UDP encapsulation) are available.
The sender MAY use any means of obtaining the information about ESP Echo support, such as an explicit out-of-band configuration (for example, a VPN client might be configured to always use ESP Echo when communicating to the given VPN server).

# Updates to RFC4303 

Section 2.6 of {{!RFC4303}} discusses "dummy" ESP packets, which are distinguishable by the Next Header value set to 59.
As per {{!RFC4303}} a receiver MUST be prepared to silently discard "dummy" packets. This document updates Section 2.6 of {{!RFC4303}} to allow packets with the Next Header value of 59 to be processed, if SPI is set to [ESP-ECHO-REQUEST] or [ESP-ECHO-REPLY].

OLD TEXT:

A transmitter MUST be capable of generating dummy packets marked with this value in the next protocol field, and a receiver MUST be prepared to discard such packets, without indicating an error.

NEW TEXT:

A transmitter MUST be capable of generating dummy packets marked with this value in the next protocol field, and a receiver MUST be prepared to discard such packets, without indicating an error.
A transmitter MUST NOT use the reserved SPI values [ESP-ECHO-REQUEST] or [ESP-ECHO-REPLY] for dummy packets. A receiver SHOULD NOT discard packets with  the Next Header value set of 59, if those packets use the reserved SPI values.
Packets with the reserved SPI values [ESP-ECHO-REQUEST] or [ESP-ECHO-REPLY] and the Next Header value set of 59 SHOULD be processed by the receiver as described in draft-colitti-ipsecme-esp-ping.


# Security Considerations

If an IPsec sender uses ESP Echo Request packets to determine whether the path supports ESP, an intermediate node may drop ESP Echo packets to make the sender believe that the path does not support ESP even though it does. To prevent such downgrade attacks, IPSec nodes MUST NOT fall back to unencrypted mode of communication in case of ESP Echo failure. The node MAY switch to another path (e.g. via another interface) or another protocol (e.g. IPv4).

Intermediate nodes can can forge ESP Echo Reply packets to cause the sender to believe that the network supports ESP even though it doesn't. This may result in ESP packets being blackholed and ESP sessions being unable to transmit or receive data. Intermediate nodes can achieve the same effect by allowing ESP packets with an SPI of 7 or 8, but dropping packets with any other SPI value. This failure mode already exists today, because intermediate networks can always choose to drop ESP packets.

The security considerations are similar to other unconnected request-reply protocols such as ICMPv6 echo. In particular:

* By sending an ESP Echo Request from a spoofed source address, an attacker could cause a server to send an ESP Echo Reply to that address. This does not constitute an amplification attack because the ESP Echo Reply is the same size as the ESP Echo Request. This can be prevented by implementing ingress filtering per BCP 38 {{?RFC2827}}.

* An attacker can use ESP Echo Request packets to determine whether a particular destination address is an ESP endpoint. This is not a new attack because any endpoint that supports ESP must also reply to IKE INIT packets.

# IANA Considerations

This memo requests that IANA allocate two new values from the "Security Parameters Index (SPI)" registry. The following entry should be appended:

|Number | Description | Reference |
:-------|:------------|----------:|
7-ESP-ECHO-REQUEST   | ESP Echo Request | THIS DOCUMENT |
8-ESP-ECHO-REPLY   | ESP Echo Reply | THIS DOCUMENT |
|===


# Acknowledgements

Thanks to Tero Kivinen, Steffen Klassert, Andrew McGregor, Valery Smyslov and Paul Wouters for helpful discussion and suggestions.

# Changelog
